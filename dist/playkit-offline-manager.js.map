{"version":3,"sources":["./offline-manager/webpack/universalModuleDefinition","./offline-manager/playkit-offline-manager.js","./offline-manager/webpack/bootstrap 1f9596bbcdcff00ae81e","./offline-manager/./utils/logger.js","./offline-manager/external {\"commonjs\":\"playkit-js\",\"commonjs2\":\"playkit-js\",\"amd\":\"playkit-js\",\"root\":[\"KalturaPlayer\",\"core\"]}","./offline-manager/./db-manager.js","./offline-manager/./index.js","./offline-manager/./offline-manager.js","./offline-manager/./shaka-offline-provider.js","./offline-manager/external {\"commonjs\":\"shaka-player\",\"commonjs2\":\"shaka-player\",\"amd\":\"shaka-player\",\"root\":[\"KalturaPlayer\",\"shaka\"]}","./offline-manager/../node_modules/idb/lib/idb.js","./offline-manager/../node_modules/js-logger/src/logger.js","./offline-manager/external {\"commonjs\":\"playkit-js-providers\",\"commonjs2\":\"playkit-js-providers\",\"amd\":\"playkit-js-providers\",\"root\":[\"KalturaPlayer\",\"providers\"]}"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE_1__","__WEBPACK_EXTERNAL_MODULE_6__","__WEBPACK_EXTERNAL_MODULE_9__","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","getLogger","JsLogger","getLogLevel","getLevel","setLogLevel","level","setLevel","value","LogLevel","undefined","_jsLogger","obj","newObj","key","default","DEBUG","INFO","TIME","WARN","ERROR","OFF","useDefaults","defaultLevel","_interopRequireDefault","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","length","descriptor","writable","protoProps","staticProps","_idb","_idb2","_logger","_logger2","_playkitJs","DB_NAME","DBManager","config","debug","window","open","store","dbPromise","upgradeDb","objectStoreNames","contains","createObjectStore","keyPath","storeName","item","_this","then","db","tx","transaction","objectStore","_addConfigToItem","put","complete","catch","error","Promise","reject","Error","Severity","RECOVERABLE","Category","STORAGE","Code","CANNOT_ADD_ITEM","delete","REQUESTED_ITEM_NOT_FOUND","entryId","getAll","allObjs","add","NAME","VERSION","OfflineManager","_offlineManager","_offlineManager2","_possibleConstructorReturn","ReferenceError","_inherits","subClass","superClass","create","constructor","setPrototypeOf","__proto__","_shakaOfflineProvider","_playkitJsProviders","_dbManager","_dbManager2","downloadStates","DOWNLOADING","PAUSED","RESUMED","ENDED","NOT_SUPPORTED_SOURCE_TYPES","_FakeEventTarget","logLevel","getPrototypeOf","_downloads","_config","_eventManager","EventManager","_setOfflineAdapter","_isDBSynced","_this2","_offlineProvider","ShakaOfflineProvider","listen","PROGRESS_EVENT","e","dispatchEvent","mediaInfo","_this3","id","resolve","sources","dash","Provider","provider","getMediaConfig","mediaConfig","Utils","hasPropertyPath","_removeNotRelevantSources","sourceData","_onError","COULD_NOT_GET_INFO_FROM_MEDIA_PROVIDER","_this4","currentDownload","_recoverEntry","includes","state","pause","update","prepareItemForStorage","PAUSE","PAUSE_ABORTERD","ENTRY_DOES_NOT_EXIST","_this5","setSessionData","resume","manifestDB","downloadStatus","ob","RESUME_REJECTED","_this6","RENEW_LICENSE_FAILED","renewLicense","expiration","options","_this7","ENTRY_ALREADY_EXISTS","_doesEntryExists","existsInDB","_addDownloadParam","download","DOWNLOAD_ABORTED","_this8","remove","REMOVE_REJECTED","_this9","promises","getAllDownloads","downloads","forEach","push","all","_this10","getDownloadedMediaConfig","data","_this11","_getReducedDownloadObjectsData","dbDownloads","url","_this12","entry","source","slice","assign","currEntry","recovered","_this13","keys","map","metadata","poster","expectedSize","size","event","FakeEvent","EventType","destroy","FakeEventTarget","_shakaPlayer","_shakaPlayer2","_dtgVideoElement","document","createElement","polyfill","installAll","_dtgShaka","Player","_configureShakaPlayer","addEventListener","_onShakaError","adapterName","adapterVersion","playerVersion","configure","streaming","retryParameters","timeout","maxAttempts","baseDelay","backoffFactor","fuzzFactor","_configureDrmIfNeeded","_initStorage","storage","storeManifest","manifest","offlineUri","pausePromise","storePormise","storePromise","action","detail","code","VIDEO_ERROR_CODE","playerError","severity","category","drmData","servers","val","scheme","licenseUrl","drm","keysToDelete","storeObj","selectedSource","newMediaInfo","getDataByEntry","dbData","_updateDrmDataIfNeeded","currentDownload_","bitrate","arguments","language","tracks","textTracks","filter","track","type","langFilteredTracks","reduce","prev","curr","Math","abs","bandwidth","concat","offline","Storage","configuration","usePersistentLicense","_trackSelectionCallback","_setDownloadProgress","content","progress","details","toArray","arr","Array","promisifyRequest","request","onsuccess","result","onerror","promisifyRequestCall","method","args","apply","promisifyCursorRequestCall","Cursor","proxyProperties","ProxyClass","targetProp","properties","prop","set","proxyRequestMethods","proxyMethods","proxyCursorRequestMethods","Index","index","_index","cursor","_cursor","_request","ObjectStore","_store","Transaction","idbTransaction","_tx","oncomplete","onabort","UpgradeDB","oldVersion","_db","DB","IDBIndex","IDBCursor","methodName","createIndex","IDBObjectStore","IDBTransaction","IDBDatabase","funcName","replace","callback","nativeObject","query","count","items","iterateCursor","continue","exp","version","upgradeCallback","indexedDB","onupgradeneeded","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","global","Logger","logHandler","contextualLoggersByNameMap","bind","scope","func","merge","defineLogLevel","ContextualLogger","defaultContext","context","filterLevel","log","info","newLevel","enabledFor","lvl","invoke","warn","time","label","timeEnd","msgArgs","globalLogger","L","setHandler","createDefaultHandler","formatter","messages","unshift","timerStartTimeByLabelMap","invokeConsoleMethod","hdlr","Function","console","timerLabel","Date","getTime"],"mappings":"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","file":"playkit-offline-manager.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"playkit-js\"), require(\"shaka-player\"), require(\"playkit-js-providers\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"playkit-js\", \"shaka-player\", \"playkit-js-providers\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"OfflineManager\"] = factory(require(\"playkit-js\"), require(\"shaka-player\"), require(\"playkit-js-providers\"));\n\telse\n\t\troot[\"KalturaPlayer\"] = root[\"KalturaPlayer\"] || {}, root[\"KalturaPlayer\"][\"OfflineManager\"] = factory(root[\"KalturaPlayer\"][\"core\"], root[\"KalturaPlayer\"][\"shaka\"], root[\"KalturaPlayer\"][\"providers\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_6__, __WEBPACK_EXTERNAL_MODULE_9__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"playkit-js\"), require(\"shaka-player\"), require(\"playkit-js-providers\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"playkit-js\", \"shaka-player\", \"playkit-js-providers\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"OfflineManager\"] = factory(require(\"playkit-js\"), require(\"shaka-player\"), require(\"playkit-js-providers\"));\n\telse\n\t\troot[\"KalturaPlayer\"] = root[\"KalturaPlayer\"] || {}, root[\"KalturaPlayer\"][\"OfflineManager\"] = factory(root[\"KalturaPlayer\"][\"core\"], root[\"KalturaPlayer\"][\"shaka\"], root[\"KalturaPlayer\"][\"providers\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_6__, __WEBPACK_EXTERNAL_MODULE_9__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 3);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setLogLevel = exports.getLogLevel = exports.LogLevel = undefined;\n\nvar _jsLogger = __webpack_require__(8);\n\nvar JsLogger = _interopRequireWildcard(_jsLogger);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar LogLevel = {\n  DEBUG: JsLogger.DEBUG,\n  INFO: JsLogger.INFO,\n  TIME: JsLogger.TIME,\n  WARN: JsLogger.WARN,\n  ERROR: JsLogger.ERROR,\n  OFF: JsLogger.OFF\n};\n\n\nJsLogger.useDefaults({ defaultLevel: JsLogger.ERROR });\n\n/**\n * get a logger\n * @param {?string} name - the logger name\n * @returns {Object} - the logger class\n */\nfunction getLogger(name) {\n  if (!name) {\n    return JsLogger;\n  }\n  return JsLogger.get(name);\n}\n\n/**\n * get the log level\n * @param {?string} name - the logger name\n * @returns {LogLevelObject} - the log level\n */\nfunction getLogLevel(name) {\n  return getLogger(name).getLevel();\n}\n\n/**\n * sets the logger level\n * @param {LogLevelObject} level - the log level\n * @param {?string} name - the logger name\n * @returns {void}\n */\nfunction setLogLevel(level, name) {\n  getLogger(name).setLevel(level);\n}\n\nexports.default = getLogger;\nexports.LogLevel = LogLevel;\nexports.getLogLevel = getLogLevel;\nexports.setLogLevel = setLogLevel;\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _idb = __webpack_require__(7);\n\nvar _idb2 = _interopRequireDefault(_idb);\n\nvar _logger = __webpack_require__(0);\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _playkitJs = __webpack_require__(1);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar KEY_PATH = 'entryId';\nvar ENTRIES_MAP_STORE_NAME = 'entriesMap';\nvar DB_NAME = 'offline-manager';\n/**\n * Your class description.\n * @classdesc\n */\n\nvar DBManager = function () {\n  /**\n   * @constructor\n   * @param {Object} config - The plugin config.\n   */\n  function DBManager(config) {\n    _classCallCheck(this, DBManager);\n\n    DBManager._logger.debug('DBManager created');\n    if (!('indexedDB' in window)) {\n      // console.log('This browser doesn\\'t support IndexedDB');\n      return;\n    }\n    this.config = config;\n    this.open(DB_NAME);\n  }\n\n  _createClass(DBManager, [{\n    key: 'open',\n    value: function open(store) {\n      this.dbPromise = _idb2.default.open(store, 1, function (upgradeDb) {\n        DBManager._logger.debug('open');\n        if (!upgradeDb.objectStoreNames.contains(ENTRIES_MAP_STORE_NAME)) {\n          upgradeDb.createObjectStore(ENTRIES_MAP_STORE_NAME, { keyPath: KEY_PATH });\n        }\n      });\n    }\n  }, {\n    key: 'add',\n    value: function add(storeName, key, item) {\n      var _this = this;\n\n      return this.dbPromise.then(function (db) {\n        DBManager._logger.debug('add');\n        var tx = db.transaction(storeName, 'readwrite');\n        var store = tx.objectStore(storeName);\n        _this._addConfigToItem(item);\n        item[KEY_PATH] = key;\n        store.put(item);\n        return tx.complete;\n      }).catch(function (error) {\n        Promise.reject(new _playkitJs.Error(_playkitJs.Error.Severity.RECOVERABLE, _playkitJs.Error.Category.STORAGE, _playkitJs.Error.Code.CANNOT_ADD_ITEM, error));\n      });\n    }\n  }, {\n    key: 'remove',\n    value: function remove(storeName, key) {\n      return this.dbPromise.then(function (db) {\n        DBManager._logger.debug('remove');\n        var tx = db.transaction(storeName, 'readwrite');\n        tx.objectStore(storeName).delete(key);\n        return tx.complete;\n      }).catch(function (error) {\n        Promise.reject(new _playkitJs.Error(_playkitJs.Error.Severity.RECOVERABLE, _playkitJs.Error.Category.STORAGE, _playkitJs.Error.Code.REQUESTED_ITEM_NOT_FOUND, error));\n      });\n    }\n  }, {\n    key: 'get',\n    value: function get(storeName, entryId) {\n      return this.dbPromise.then(function (db) {\n        DBManager._logger.debug('get', entryId);\n        return db.transaction(storeName).objectStore(storeName).get(entryId);\n      }).then(function (obj) {\n        return obj;\n      }).catch(function (error) {\n        Promise.reject(new _playkitJs.Error(_playkitJs.Error.Severity.RECOVERABLE, _playkitJs.Error.Category.STORAGE, _playkitJs.Error.Code.REQUESTED_ITEM_NOT_FOUND, error));\n      });\n    }\n  }, {\n    key: 'getAll',\n    value: function getAll(storeName) {\n      return this.dbPromise.then(function (db) {\n        DBManager._logger.debug('getAll');\n        return db.transaction(storeName).objectStore(storeName).getAll();\n      }).then(function (allObjs) {\n        return allObjs;\n      }).catch(function (error) {\n        Promise.reject(new _playkitJs.Error(_playkitJs.Error.Severity.RECOVERABLE, _playkitJs.Error.Category.STORAGE, _playkitJs.Error.Code.REQUESTED_ITEM_NOT_FOUND, error));\n      });\n    }\n  }, {\n    key: 'removeAll',\n    value: function removeAll(store) {\n      return store; //TODO implement\n    }\n  }, {\n    key: 'update',\n    value: function update(store, key, value) {\n      DBManager._logger.debug('update');\n      return this.add(store, key, value);\n    }\n  }, {\n    key: '_addConfigToItem',\n    value: function _addConfigToItem(item) {\n      for (var key in this.config) {\n        item[key] = this.config[key];\n      }\n    }\n  }]);\n\n  return DBManager;\n}();\n\nDBManager._logger = (0, _logger2.default)('DBManager');\nexports.default = DBManager;\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NAME = exports.VERSION = exports.OfflineManager = undefined;\n\nvar _offlineManager = __webpack_require__(4);\n\nvar _offlineManager2 = _interopRequireDefault(_offlineManager);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = _offlineManager2.default;\nexports.OfflineManager = _offlineManager2.default;\nexports.VERSION = \"1.0.2\";\nexports.NAME = \"playkit-js-offline-manager\";\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _shakaOfflineProvider = __webpack_require__(5);\n\nvar _playkitJsProviders = __webpack_require__(9);\n\nvar _playkitJs = __webpack_require__(1);\n\nvar _logger = __webpack_require__(0);\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _dbManager = __webpack_require__(2);\n\nvar _dbManager2 = _interopRequireDefault(_dbManager);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar downloadStates = {\n  DOWNLOADING: 'downloading',\n  PAUSED: 'paused',\n  RESUMED: 'resumed',\n  ENDED: 'ended',\n  ERROR: 'error'\n};\n\nvar ENTRIES_MAP_STORE_NAME = 'entriesMap';\n\nvar DOWNLOAD_PARAM = '?playbackType=offline';\n\nvar NOT_SUPPORTED_SOURCE_TYPES = ['hls', 'progressive'];\n\nvar SUPPORTED_SOURCE = 'dash';\n/**\n * Your class description.\n * @classdesc\n */\n\nvar OfflineManager = function (_FakeEventTarget) {\n  _inherits(OfflineManager, _FakeEventTarget);\n\n  _createClass(OfflineManager, null, [{\n    key: 'isValid',\n\n\n    /**\n     * TODO: Define under what conditions the plugin is valid.\n     * @static\n     * @public\n     * @returns {boolean} - Whether the plugin is valid.\n     */\n    value: function isValid() {\n      return true;\n    }\n\n    /**\n     * @constructor\n     * @param {Object} config - The plugin config.\n     */\n\n  }]);\n\n  function OfflineManager(config) {\n    _classCallCheck(this, OfflineManager);\n\n    if (config.logLevel && _logger.LogLevel[config.logLevel]) {\n      (0, _logger.setLogLevel)(_logger.LogLevel[config.logLevel]);\n    }\n    OfflineManager._logger.debug('offline manager created');\n\n    var _this = _possibleConstructorReturn(this, (OfflineManager.__proto__ || Object.getPrototypeOf(OfflineManager)).call(this));\n\n    if (_this._downloads) {\n      return _possibleConstructorReturn(_this);\n    }\n    _this._downloads = {};\n    _this._config = config;\n    _this._eventManager = new _playkitJs.EventManager();\n    _this._dbManager = new _dbManager2.default({});\n    _this._setOfflineAdapter();\n    _this._isDBSynced = false;\n    return _this;\n  }\n\n  _createClass(OfflineManager, [{\n    key: '_setOfflineAdapter',\n    value: function _setOfflineAdapter() {\n      var _this2 = this;\n\n      this._offlineProvider = new _shakaOfflineProvider.ShakaOfflineProvider(this._downloads, this._config);\n      this._eventManager.listen(this._offlineProvider, _shakaOfflineProvider.PROGRESS_EVENT, function (e) {\n        _this2.dispatchEvent(e);\n      });\n    }\n\n    /**\n     * This function gets the configuration (and info) from the provider.\n     * @param mediaInfo\n     * @returns {Promise<any>}\n     */\n\n  }, {\n    key: 'getMediaConfig',\n    value: function getMediaConfig(mediaInfo) {\n      var _this3 = this;\n\n      OfflineManager._logger.debug('get media info started', mediaInfo.id);\n      return new Promise(function (resolve) {\n        if (_this3._downloads[mediaInfo.id]) {\n          return resolve(_this3._downloads[mediaInfo.id].sources.dash[0]);\n        }\n        var provider = new _playkitJsProviders.Provider(_this3._config.provider);\n        return provider.getMediaConfig(mediaInfo).then(function (mediaConfig) {\n          if (_playkitJs.Utils.Object.hasPropertyPath(mediaConfig, 'sources.dash') && mediaConfig.sources.dash.length > 0) {\n            mediaConfig = _this3._removeNotRelevantSources(mediaConfig);\n            var sourceData = mediaConfig.sources.dash[0];\n            sourceData.id = mediaConfig.sources.id;\n            _this3._downloads[mediaConfig.sources.id] = mediaConfig;\n            OfflineManager._logger.debug('get media info ended');\n            return resolve(sourceData);\n          } else {\n            _this3._onError(new _playkitJs.Error(_playkitJs.Error.Severity.RECOVERABLE, _playkitJs.Error.Category.STORAGE, _playkitJs.Error.Code.COULD_NOT_GET_INFO_FROM_MEDIA_PROVIDER));\n          }\n        });\n      });\n    }\n\n    /**\n     * This function pauses a download\n     * @param entryId\n     * @returns {Promise<any>}\n     */\n\n  }, {\n    key: 'pause',\n    value: function pause(entryId) {\n      var _this4 = this;\n\n      return new Promise(function (resolve) {\n        OfflineManager._logger.debug('pause start', entryId);\n        var currentDownload = _this4._downloads[entryId];\n        if (!currentDownload) {\n          _this4._onError(new _playkitJs.Error(_playkitJs.Error.Severity.RECOVERABLE, _playkitJs.Error.Category.STORAGE, _playkitJs.Error.Code.ENTRY_DOES_NOT_EXIST, entryId)); //TODO LOG THIS (until background fetch is here)\n        } else {\n          _this4._recoverEntry(entryId);\n          if ([downloadStates.DOWNLOADING, downloadStates.RESUMED].includes(currentDownload.state)) {\n            return _this4._offlineProvider.pause(entryId).then(function () {\n              currentDownload.state = downloadStates.PAUSED;\n              return _this4._dbManager.update(ENTRIES_MAP_STORE_NAME, entryId, _this4._offlineProvider.prepareItemForStorage(currentDownload)).then(function () {\n                OfflineManager._logger.debug('paused ended', entryId);\n                resolve({\n                  entryId: entryId,\n                  state: downloadStates.PAUSE\n                });\n              });\n            }).catch(function (error) {\n              _this4._onError(new _playkitJs.Error(_playkitJs.Error.Severity.RECOVERABLE, _playkitJs.Error.Category.STORAGE, _playkitJs.Error.Code.PAUSE_ABORTERD, error));\n            });\n          } else {\n            return resolve();\n          }\n        }\n      });\n    }\n\n    /**\n     * This function resumes a download\n     * @param entryId\n     * @returns {Promise<*>}\n     */\n\n  }, {\n    key: 'resume',\n    value: function resume(entryId) {\n      var _this5 = this;\n\n      OfflineManager._logger.debug('resume started', entryId);\n      return this._offlineProvider.setSessionData(entryId).then(function () {\n        var currentDownload = _this5._downloads[entryId];\n        _this5._recoverEntry(entryId);\n        if (currentDownload.state === downloadStates.PAUSED) {\n          currentDownload.state = downloadStates.RESUMED;\n          _this5._offlineProvider.resume(entryId).then(function (manifestDB) {\n            currentDownload.state = [manifestDB.downloadStatus, manifestDB.ob].includes(downloadStates.ENDED) ? downloadStates.ENDED : downloadStates.PAUSED;\n            _this5._dbManager.update(ENTRIES_MAP_STORE_NAME, entryId, _this5._offlineProvider.prepareItemForStorage(currentDownload)).then(function () {\n              OfflineManager._logger.debug('resume ended / paused', entryId);\n              return Promise.resolve({\n                state: currentDownload.state,\n                entryId: entryId\n              });\n            });\n          });\n        }\n      }).catch(function (error) {\n        _this5._onError(new _playkitJs.Error(_playkitJs.Error.Severity.RECOVERABLE, _playkitJs.Error.Category.STORAGE, _playkitJs.Error.Code.RESUME_REJECTED, error));\n      });\n    }\n\n    /**\n     * This function gets an entryId and renew it's DRM license from the server\n     * @param entryId\n     * @returns {Promise<T>}\n     */\n\n  }, {\n    key: 'renewLicense',\n    value: function renewLicense(entryId) {\n      var _this6 = this;\n\n      OfflineManager._logger.debug('renew license started', entryId);\n      var provider = new _playkitJsProviders.Provider(this._config.provider);\n      return provider.getMediaConfig({\n        entryId: entryId\n      }).then(function (mediaConfig) {\n        if (!_playkitJs.Utils.Object.hasPropertyPath(mediaConfig, 'sources.dash') && mediaConfig.sources.dash.length > 0) {\n          _this6._onError(new _playkitJs.Error(_playkitJs.Error.Severity.RECOVERABLE, _playkitJs.Error.Category.STORAGE, _playkitJs.Error.Code.RENEW_LICENSE_FAILED, 'not enough data from the media provider'));\n        }\n        return _this6._offlineProvider.setSessionData(entryId, mediaConfig).then(function () {\n          var currentDownload = _this6._downloads[entryId];\n          if (currentDownload.state === downloadStates.ENDED) {\n            _this6._offlineProvider.renewLicense(entryId).then(function (expiration) {\n              _this6._dbManager.update(ENTRIES_MAP_STORE_NAME, entryId, _this6._offlineProvider.prepareItemForStorage(currentDownload)).then(function () {\n                OfflineManager._logger.debug('renew license ended', entryId);\n                return Promise.resolve({\n                  state: currentDownload.state,\n                  entryId: entryId,\n                  expiration: expiration\n                });\n              });\n            });\n          }\n        });\n      }).catch(function (error) {\n        _this6._onError(new _playkitJs.Error(_playkitJs.Error.Severity.RECOVERABLE, _playkitJs.Error.Category.STORAGE, _playkitJs.Error.Code.RENEW_LICENSE_FAILED, error));\n      });\n    }\n  }, {\n    key: 'download',\n    value: function download(entryId, options) {\n      var _this7 = this;\n\n      return new Promise(function (resolve) {\n        OfflineManager._logger.debug('download start', entryId);\n        var currentDownload = _this7._downloads[entryId];\n        if (currentDownload.state) {\n          _this7._onError(new _playkitJs.Error(_playkitJs.Error.Severity.RECOVERABLE, _playkitJs.Error.Category.STORAGE, _playkitJs.Error.Code.ENTRY_ALREADY_EXISTS, entryId));\n          return;\n        }\n        _this7._doesEntryExists(entryId).then(function (existsInDB) {\n          if (existsInDB) {\n            _this7._onError(new _playkitJs.Error(_playkitJs.Error.Severity.RECOVERABLE, _playkitJs.Error.Category.STORAGE, _playkitJs.Error.Code.ENTRY_ALREADY_EXISTS, entryId));\n            return;\n          }\n          currentDownload['state'] = downloadStates.DOWNLOADING;\n          _this7._addDownloadParam(entryId);\n          _this7._offlineProvider.download(entryId, options).then(function () {\n            return _this7._dbManager.update(ENTRIES_MAP_STORE_NAME, entryId, _this7._offlineProvider.prepareItemForStorage(currentDownload));\n          }).then(function () {\n            OfflineManager._logger.debug('download ended / paused', entryId);\n            resolve({\n              state: currentDownload.state,\n              entryId: entryId\n            });\n          }).catch(function (error) {\n            _this7._onError(new _playkitJs.Error(_playkitJs.Error.Severity.RECOVERABLE, _playkitJs.Error.Category.STORAGE, _playkitJs.Error.Code.DOWNLOAD_ABORTED, error));\n          });\n        });\n      });\n    }\n  }, {\n    key: 'remove',\n    value: function remove(entryId) {\n      var _this8 = this;\n\n      OfflineManager._logger.debug('remove start', entryId);\n      return this._offlineProvider.setSessionData(entryId).then(function () {\n        var currentDownload = _this8._downloads[entryId];\n        if (!currentDownload.state) {\n          _this8._onError(new _playkitJs.Error(_playkitJs.Error.Severity.RECOVERABLE, _playkitJs.Error.Category.STORAGE, _playkitJs.Error.Code.REQUESTED_ITEM_NOT_FOUND));\n        }\n        _this8._offlineProvider.remove(entryId).then(function () {\n          _this8._dbManager.remove(ENTRIES_MAP_STORE_NAME, entryId).then(function () {\n            delete _this8._downloads[entryId];\n            OfflineManager._logger.debug('remove ended', entryId);\n            return Promise.resolve({\n              state: currentDownload.state,\n              entryId: entryId\n            });\n          });\n        });\n      }).catch(function (error) {\n        _this8._onError(new _playkitJs.Error(_playkitJs.Error.Severity.RECOVERABLE, _playkitJs.Error.Category.STORAGE, _playkitJs.Error.Code.REMOVE_REJECTED, error));\n      });\n    }\n  }, {\n    key: 'removeAll',\n    value: function removeAll() {\n      var _this9 = this;\n\n      var promises = [];\n      return this.getAllDownloads().then(function (downloads) {\n        downloads.forEach(function (download) {\n          promises.push(_this9.remove(download.sources.id));\n        });\n        _this9._downloads = {};\n        return Promise.all(promises);\n      });\n    }\n  }, {\n    key: 'pauseAll',\n    value: function pauseAll() {\n      var _this10 = this;\n\n      var promises = [];\n      return this.getAllDownloads().then(function (downloads) {\n        downloads.forEach(function (download) {\n          promises.push(_this10.pause(download.sources.id));\n        });\n        return Promise.all(promises);\n      });\n    }\n  }, {\n    key: 'getExpiration',\n    value: function getExpiration(entryId) {\n      return this.getDownloadedMediaConfig(entryId).then(function (data) {\n        return data.expiration;\n      });\n    }\n\n    /**\n     * Getting the full media config of an entry from the indexed db. It contains the full provider info\n     * the status of the download, actual size of the entry, expected size (full size) and drm expiration date.\n     * @param entryId\n     * @returns {*}\n     */\n\n  }, {\n    key: 'getDownloadedMediaConfig',\n    value: function getDownloadedMediaConfig(entryId) {\n      OfflineManager._logger.debug('getDownloadedMediaConfig', entryId);\n      return this._dbManager.get(ENTRIES_MAP_STORE_NAME, entryId);\n    }\n\n    /**\n     * Getting all the in progress, ended, resumed, paused and ended downloads.\n     * @returns {Promise<Array<Object>>}\n     */\n\n  }, {\n    key: 'getAllDownloads',\n    value: function getAllDownloads() {\n      var _this11 = this;\n\n      if (this._isDBSynced) {\n        return Promise.resolve(this._getReducedDownloadObjectsData());\n      }\n      return this._dbManager.getAll(ENTRIES_MAP_STORE_NAME).then(function (dbDownloads) {\n        _this11._isDBSynced = true;\n        dbDownloads.forEach(function (download) {\n          var entryId = download.sources.id;\n          if (!_this11._downloads[entryId]) {\n            _this11._downloads[entryId] = download;\n            _this11._recoverEntry(entryId);\n          }\n        });\n        return Promise.resolve(_this11._getReducedDownloadObjectsData());\n      });\n    }\n\n    /**\n     * add parameter to the manifest url so the server will know it's only for downloading and not playing (stats purpose)\n     * @param entryId\n     * @private\n     */\n\n  }, {\n    key: '_addDownloadParam',\n    value: function _addDownloadParam(entryId) {\n      var currentDownload = this._downloads[entryId];\n      currentDownload.sources.dash[0].url = currentDownload.sources.dash[0].url + DOWNLOAD_PARAM;\n    }\n\n    /**\n     * checking if an entry exists already in the DB.\n     * @param entryId\n     * @returns {Promise<any>}\n     * @private\n     */\n\n  }, {\n    key: '_doesEntryExists',\n    value: function _doesEntryExists(entryId) {\n      var _this12 = this;\n\n      return new Promise(function (resolve) {\n        return _this12.getDownloadedMediaConfig(entryId).then(function (entry) {\n          resolve(entry && entry.state);\n        });\n      });\n    }\n\n    /**\n     * Removing  sources that we are not downloading from the media config\n     * currently as we are having only dash adapter, we will take the first dash source.\n     * @param {Object} mediaConfig\n     * @private\n     */\n\n  }, {\n    key: '_removeNotRelevantSources',\n    value: function _removeNotRelevantSources(mediaConfig) {\n      for (var key in mediaConfig.sources) {\n        var source = mediaConfig.sources[key];\n        if (NOT_SUPPORTED_SOURCE_TYPES.includes(key)) {\n          delete mediaConfig.sources[key];\n        } else if (key === SUPPORTED_SOURCE) {\n          source = source.slice(1);\n        }\n      }\n      return Object.assign({}, mediaConfig);\n    }\n\n    /**\n     * The indexed db can contain corrupted values regarding a download if something goes wrong.\n     * for example, it can has a \"downloading\" state while there is nothing downloaded,\n     * if a download was interrupted unexpectedly (browser crash e.g).\n     * this function handles this.\n     * @private\n     */\n\n  }, {\n    key: '_recoverEntry',\n    value: function _recoverEntry(entryId) {\n      var currEntry = this._downloads[entryId];\n      if (!currEntry || currEntry.recovered) {\n        return;\n      } else {\n        if (currEntry.state === downloadStates.DOWNLOADING || currEntry.state === downloadStates.RESUMED) {\n          currEntry.state = downloadStates.PAUSED;\n        }\n        currEntry.recovered = true;\n      }\n    }\n\n    /**\n     * get a reduced and normalized version of the provider data.\n     * @returns {Array<Object>}\n     * @private\n     */\n\n  }, {\n    key: '_getReducedDownloadObjectsData',\n    value: function _getReducedDownloadObjectsData() {\n      var _this13 = this;\n\n      return Object.keys(this._downloads).map(function (i) {\n        var item = _this13._downloads[i];\n        return {\n          id: item.sources.id,\n          metadata: item.sources.metadata,\n          poster: item.sources.poster,\n          expectedSize: item.expectedSize,\n          size: item.size,\n          expiration: item.expiration,\n          state: item.state\n        };\n      });\n    }\n\n    /**\n     * Error handler, dispatches an error object\n     * @param error\n     * @private\n     */\n\n  }, {\n    key: '_onError',\n    value: function _onError(error) {\n      var event = new _playkitJs.FakeEvent(_playkitJs.EventType.ERROR, error);\n      this.dispatchEvent(event);\n    }\n\n    /**\n     * TODO: Define the destroy logic of your plugin.\n     * Destroys the plugin.\n     * @override\n     * @public\n     * @returns {void}\n     */\n\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      // Write logic\n      this._eventManager.destroy();\n    }\n\n    /**\n     * TODO: Define the reset logic of your plugin.\n     * Resets the plugin.\n     * @override\n     * @public\n     * @returns {void}\n     */\n\n  }, {\n    key: 'reset',\n    value: function reset() {\n      // Write logic\n    }\n  }]);\n\n  return OfflineManager;\n}(_playkitJs.FakeEventTarget);\n\nOfflineManager._logger = (0, _logger2.default)('OfflineManager');\nexports.default = OfflineManager;\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ShakaOfflineProvider = exports.PROGRESS_EVENT = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _shakaPlayer = __webpack_require__(6);\n\nvar _shakaPlayer2 = _interopRequireDefault(_shakaPlayer);\n\nvar _dbManager = __webpack_require__(2);\n\nvar _dbManager2 = _interopRequireDefault(_dbManager);\n\nvar _playkitJs = __webpack_require__(1);\n\nvar _logger = __webpack_require__(0);\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } //flow\n\n\nvar downloadStates = {\n  DOWNLOADING: 'downloading',\n  PAUSED: 'paused',\n  RESUMED: 'resumed',\n  ENDED: 'ended'\n};\n\nvar ENTRIES_MAP_STORE_NAME = 'entriesMap';\n\nvar PROGRESS_EVENT = exports.PROGRESS_EVENT = 'progress';\n\nvar ShakaOfflineProvider = exports.ShakaOfflineProvider = function (_FakeEventTarget) {\n  _inherits(ShakaOfflineProvider, _FakeEventTarget);\n\n  function ShakaOfflineProvider(downloads) {\n    _classCallCheck(this, ShakaOfflineProvider);\n\n    var _this = _possibleConstructorReturn(this, (ShakaOfflineProvider.__proto__ || Object.getPrototypeOf(ShakaOfflineProvider)).call(this));\n\n    ShakaOfflineProvider._logger.debug('ShakaOfflineProvider created');\n    _this._dtgVideoElement = document.createElement('video');\n    _shakaPlayer2.default.polyfill.installAll();\n    _this._dtgShaka = new _shakaPlayer2.default.Player(_this._dtgVideoElement);\n    _this._configureShakaPlayer();\n    _this._dtgShaka.addEventListener(_playkitJs.EventType.ERROR, _this._onShakaError);\n    // todo remove this as part of the classes refactor, adding the offline provider config should be on \"item.prepareforstorage()\"\n    _this._dbManager = new _dbManager2.default({\n      adapterName: 'shaka',\n      adapterVersion: \"\", //player.version,\n      playerVersion: \"\" //player.version\n    });\n    _this._downloads = downloads;\n    return _this;\n  }\n\n  _createClass(ShakaOfflineProvider, [{\n    key: '_configureShakaPlayer',\n    value: function _configureShakaPlayer() {\n      this._dtgShaka.configure({\n        streaming: {\n          retryParameters: {\n            timeout: 0, // timeout in ms, after which we abort a request; 0 means never\n            maxAttempts: 100, // the maximum number of requests before we fail\n            baseDelay: 1000, // the base delay in ms between retries\n            backoffFactor: 2, // the multiplicative backoff factor between retries\n            fuzzFactor: 0.5 // the fuzz factor to apply to each retry delay\n          }\n        }\n      });\n    }\n  }, {\n    key: 'download',\n    value: function download(entryId, options) {\n      var _this2 = this;\n\n      return new Promise(function (resolve, reject) {\n        ShakaOfflineProvider._logger.debug('download', entryId);\n        var currentDownload = _this2._downloads[entryId];\n        _this2._configureDrmIfNeeded(entryId);\n        currentDownload['storage'] = _this2._initStorage(entryId, options);\n        // first store manifest\n        currentDownload.storage.storeManifest(currentDownload.sources.dash[0].url, {}).then(function (manifest) {\n          ShakaOfflineProvider._logger.debug('after storage.storeManifest', entryId);\n          currentDownload.state = downloadStates.DOWNLOADING;\n          currentDownload.recovered = true;\n          currentDownload.sources.dash[0].url = manifest.offlineUri;\n          currentDownload.expiration = manifest.expiration;\n          currentDownload.expectedSize = manifest.expectedSize;\n          currentDownload.size = 0;\n          return _this2._dbManager.add(ENTRIES_MAP_STORE_NAME, entryId, _this2.prepareItemForStorage(currentDownload));\n        }).then(function () {\n          // then download the content\n          return currentDownload.storage.download(currentDownload.sources.dash[0].url);\n        }).then(function (manifest) {\n          currentDownload.size = manifest.size;\n          currentDownload.state = manifest.downloadStatus;\n          resolve();\n        }).catch(function (error) {\n          reject(new _playkitJs.Error(_playkitJs.Error.Severity.RECOVERABLE, _playkitJs.Error.Category.STORAGE, _playkitJs.Error.Code.DOWNLOAD_ABORTED, error));\n        });\n      });\n    }\n  }, {\n    key: 'pause',\n    value: function pause(entryId) {\n      ShakaOfflineProvider._logger.debug('pause', entryId);\n      var currentDownload = this._downloads[entryId];\n      return currentDownload.storage.pause();\n    }\n  }, {\n    key: 'resume',\n    value: function resume(entryId) {\n      ShakaOfflineProvider._logger.debug('resume', entryId);\n      var currentDownload = this._downloads[entryId];\n      return currentDownload.storage.download(currentDownload.sources.dash[0].url);\n    }\n  }, {\n    key: 'remove',\n    value: function remove(entryId) {\n      var _this3 = this;\n\n      ShakaOfflineProvider._logger.debug('remove', entryId);\n      var currentDownload = this._downloads[entryId];\n      // in case of removing a download in progress, we have to pause the download and wait for the\n      // store promise to be resolved. Only then we will have the shaka offline storage uri, so it can be deleted\n      // from the shaka indexed db as well.\n      var pausePromise = currentDownload.state === downloadStates.ENDED ? Promise.resolve() : this.pause(entryId);\n      var storePormise = currentDownload.storePromise || Promise.resolve();\n      return Promise.all([pausePromise, storePormise]).then(function () {\n        currentDownload.storage = _this3._initStorage(entryId, { action: 'remove' });\n        return currentDownload.storage.remove(currentDownload.sources.dash[0].url);\n      });\n    }\n  }, {\n    key: 'renewLicense',\n    value: function renewLicense(entryId) {\n      ShakaOfflineProvider._logger.debug('renewLicense', entryId);\n      var currentDownload = this._downloads[entryId];\n      this._configureDrmIfNeeded(entryId);\n      currentDownload['storage'] = this._initStorage(entryId, {});\n      return currentDownload.storage.renewLicense(currentDownload.sources.dash[0].url).then(function (manifestDB) {\n        currentDownload.expiration = manifestDB.expiration;\n        return Promise.resolve(manifestDB.expiration);\n      });\n    }\n  }, {\n    key: 'getDataByEntry',\n    value: function getDataByEntry(entryId) {\n      return this._dbManager.get(ENTRIES_MAP_STORE_NAME, entryId);\n    }\n  }, {\n    key: 'getAllDownloads',\n    value: function getAllDownloads() {\n      return this._dbManager.getAll(ENTRIES_MAP_STORE_NAME);\n    }\n  }, {\n    key: '_onShakaError',\n    value: function _onShakaError(event) {\n      if (event && event.detail) {\n        var error = event.detail;\n        //currently we don't handle video element errors on the offline shaka\n        if (error.code === this.VIDEO_ERROR_CODE) {\n          ShakaOfflineProvider._logger.error(error);\n          return;\n        }\n\n        var playerError = new _playkitJs.Error(error.severity, error.category, error.code, error.data);\n        ShakaOfflineProvider._logger.error(playerError);\n        this.dispatchEvent(new _playkitJs.FakeEvent(_playkitJs.EventType.ERROR, {\n          detail: playerError\n        }));\n      }\n    }\n  }, {\n    key: '_configureDrmIfNeeded',\n    value: function _configureDrmIfNeeded(entryId) {\n      ShakaOfflineProvider._logger.debug('configure drm if needed', entryId);\n      var currentDownload = this._downloads[entryId];\n      var drmData = currentDownload.sources.dash[0].drmData;\n      if (drmData) {\n        var servers = {};\n        drmData.forEach(function (val) {\n          servers[val.scheme] = val.licenseUrl;\n        });\n        this._dtgShaka.configure({ 'drm': { 'servers': servers } });\n      } else {\n        this._dtgShaka.configure({});\n      }\n    }\n  }, {\n    key: 'prepareItemForStorage',\n    value: function prepareItemForStorage(object) {\n      var keysToDelete = [\"storage\", \"url\", \"mimetype\", \"storePromise\", \"recovered\"];\n      var storeObj = Object.assign({}, object);\n      for (var key in storeObj) {\n        if (keysToDelete.includes(key)) {\n          delete storeObj[key];\n        }\n      }\n      var selectedSource = object.sources.dash[0];\n      selectedSource['localSource'] = true;\n      object.sources.dash = [selectedSource]; // storing only one relevant source\n      return storeObj;\n    }\n\n    /**\n     * This function makes an entry ready to be used by the download manager.\n     * It gets the entry data from DB, it refreshes the drm data and create a shaka storage\n     * object if one was not created already.\n     * @param entryId\n     * @param newMediaInfo - new mediaInfo from the server (used for renewDRM) TODO: pass only drm data?\n     * @returns {Promise<any>}\n     */\n\n  }, {\n    key: 'setSessionData',\n    value: function setSessionData(entryId, newMediaInfo) {\n      var _this4 = this;\n\n      ShakaOfflineProvider._logger.debug('set session data', entryId);\n      return new Promise(function (resolve, reject) {\n        if (_this4._downloads[entryId]) {\n          return resolve();\n        }\n        return _this4.getDataByEntry(entryId).then(function (dbData) {\n          var data = Object.assign({}, dbData);\n          _this4._downloads[entryId] = data;\n          return resolve();\n        }).catch(function (error) {\n          reject(error);\n        });\n      }).then(function () {\n        var currentDownload = _this4._downloads[entryId];\n        currentDownload.storage = currentDownload.storage ? currentDownload.storage : _this4._initStorage(entryId);\n        _this4._updateDrmDataIfNeeded(entryId, newMediaInfo);\n        return Promise.resolve();\n      }).catch(function (error) {\n        Promise.reject(error);\n      });\n    }\n  }, {\n    key: '_updateDrmDataIfNeeded',\n    value: function _updateDrmDataIfNeeded(entryId, newMediaInfo) {\n      if (!newMediaInfo) {\n        return;\n      }\n      var currentDownload_ = this._downloads[entryId];\n      if (currentDownload_.sources.dash[0].drmData && newMediaInfo.sources.dash[0].drmData) {\n        currentDownload_.sources.dash[0].drmData = newMediaInfo.sources.dash[0].drmData;\n      }\n    }\n  }, {\n    key: '_trackSelectionCallback',\n    value: function _trackSelectionCallback() {\n      var bitrate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var language = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      return function (tracks) {\n        var textTracks = tracks.filter(function (track) {\n          return track.type === 'text';\n        });\n        var langFilteredTracks = tracks.filter(function (track) {\n          return track.language === language && track.type !== 'text';\n        });\n        tracks = langFilteredTracks.length > 0 ? langFilteredTracks : tracks;\n        var closest = tracks.reduce(function (prev, curr) {\n          return Math.abs(curr.bandwidth - bitrate) < Math.abs(prev.bandwidth - bitrate) ? curr : prev;\n        });\n        return [closest].concat(textTracks);\n      };\n    }\n  }, {\n    key: '_initStorage',\n    value: function _initStorage(entryId) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      ShakaOfflineProvider._logger.debug('init storage', entryId);\n      var storage = new _shakaPlayer2.default.offline.Storage(this._dtgShaka);\n      var configuration = {\n        usePersistentLicense: true\n      };\n      if (options.bitrate || options.language) {\n        configuration[\"trackSelectionCallback\"] = this._trackSelectionCallback(options.bitrate, options.language);\n      }\n      if (!options.action || options.action !== 'remove') {\n        configuration[\"progressCallback\"] = this._setDownloadProgress(entryId);\n      }\n      storage.configure(configuration);\n      return storage;\n    }\n  }, {\n    key: '_setDownloadProgress',\n    value: function _setDownloadProgress(entryId) {\n      var _this5 = this;\n\n      ShakaOfflineProvider._logger.debug('set download progress', entryId);\n      return function (content, progress) {\n        var currentDownload_ = _this5._downloads[entryId];\n        currentDownload_.size = content.size;\n        _this5._dbManager.update(ENTRIES_MAP_STORE_NAME, entryId, _this5.prepareItemForStorage(currentDownload_));\n        var event = new _playkitJs.FakeEvent(PROGRESS_EVENT, {\n          detail: {\n            content: content,\n            progress: progress * 100,\n            entryId: entryId\n          },\n          details: {\n            content: content,\n            progress: progress * 100,\n            entryId: entryId\n          }\n        });\n        _this5.dispatchEvent(event);\n      };\n    }\n  }]);\n\n  return ShakaOfflineProvider;\n}(_playkitJs.FakeEventTarget);\n\nShakaOfflineProvider._logger = (0, _logger2.default)('ShakaOfflineProvider');\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_6__;\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      request.onupgradeneeded = function(event) {\n        if (upgradeCallback) {\n          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n        }\n      };\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (true) {\n    module.exports = exp;\n    module.exports.default = module.exports;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\r\n * js-logger - http://github.com/jonnyreeves/js-logger\r\n * Jonny Reeves, http://jonnyreeves.co.uk/\r\n * js-logger may be freely distributed under the MIT license.\r\n */\r\n(function (global) {\r\n\t\"use strict\";\r\n\r\n\t// Top level module for the global, static logger instance.\r\n\tvar Logger = { };\r\n\r\n\t// For those that are at home that are keeping score.\r\n\tLogger.VERSION = \"1.4.1\";\r\n\r\n\t// Function which handles all incoming log messages.\r\n\tvar logHandler;\r\n\r\n\t// Map of ContextualLogger instances by name; used by Logger.get() to return the same named instance.\r\n\tvar contextualLoggersByNameMap = {};\r\n\r\n\t// Polyfill for ES5's Function.bind.\r\n\tvar bind = function(scope, func) {\r\n\t\treturn function() {\r\n\t\t\treturn func.apply(scope, arguments);\r\n\t\t};\r\n\t};\r\n\r\n\t// Super exciting object merger-matron 9000 adding another 100 bytes to your download.\r\n\tvar merge = function () {\r\n\t\tvar args = arguments, target = args[0], key, i;\r\n\t\tfor (i = 1; i < args.length; i++) {\r\n\t\t\tfor (key in args[i]) {\r\n\t\t\t\tif (!(key in target) && args[i].hasOwnProperty(key)) {\r\n\t\t\t\t\ttarget[key] = args[i][key];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn target;\r\n\t};\r\n\r\n\t// Helper to define a logging level object; helps with optimisation.\r\n\tvar defineLogLevel = function(value, name) {\r\n\t\treturn { value: value, name: name };\r\n\t};\r\n\r\n\t// Predefined logging levels.\r\n\tLogger.DEBUG = defineLogLevel(1, 'DEBUG');\r\n\tLogger.INFO = defineLogLevel(2, 'INFO');\r\n\tLogger.TIME = defineLogLevel(3, 'TIME');\r\n\tLogger.WARN = defineLogLevel(4, 'WARN');\r\n\tLogger.ERROR = defineLogLevel(8, 'ERROR');\r\n\tLogger.OFF = defineLogLevel(99, 'OFF');\r\n\r\n\t// Inner class which performs the bulk of the work; ContextualLogger instances can be configured independently\r\n\t// of each other.\r\n\tvar ContextualLogger = function(defaultContext) {\r\n\t\tthis.context = defaultContext;\r\n\t\tthis.setLevel(defaultContext.filterLevel);\r\n\t\tthis.log = this.info;  // Convenience alias.\r\n\t};\r\n\r\n\tContextualLogger.prototype = {\r\n\t\t// Changes the current logging level for the logging instance.\r\n\t\tsetLevel: function (newLevel) {\r\n\t\t\t// Ensure the supplied Level object looks valid.\r\n\t\t\tif (newLevel && \"value\" in newLevel) {\r\n\t\t\t\tthis.context.filterLevel = newLevel;\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t// Gets the current logging level for the logging instance\r\n\t\tgetLevel: function () {\r\n\t\t\treturn this.context.filterLevel;\r\n\t\t},\r\n\r\n\t\t// Is the logger configured to output messages at the supplied level?\r\n\t\tenabledFor: function (lvl) {\r\n\t\t\tvar filterLevel = this.context.filterLevel;\r\n\t\t\treturn lvl.value >= filterLevel.value;\r\n\t\t},\r\n\r\n\t\tdebug: function () {\r\n\t\t\tthis.invoke(Logger.DEBUG, arguments);\r\n\t\t},\r\n\r\n\t\tinfo: function () {\r\n\t\t\tthis.invoke(Logger.INFO, arguments);\r\n\t\t},\r\n\r\n\t\twarn: function () {\r\n\t\t\tthis.invoke(Logger.WARN, arguments);\r\n\t\t},\r\n\r\n\t\terror: function () {\r\n\t\t\tthis.invoke(Logger.ERROR, arguments);\r\n\t\t},\r\n\r\n\t\ttime: function (label) {\r\n\t\t\tif (typeof label === 'string' && label.length > 0) {\r\n\t\t\t\tthis.invoke(Logger.TIME, [ label, 'start' ]);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\ttimeEnd: function (label) {\r\n\t\t\tif (typeof label === 'string' && label.length > 0) {\r\n\t\t\t\tthis.invoke(Logger.TIME, [ label, 'end' ]);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t// Invokes the logger callback if it's not being filtered.\r\n\t\tinvoke: function (level, msgArgs) {\r\n\t\t\tif (logHandler && this.enabledFor(level)) {\r\n\t\t\t\tlogHandler(msgArgs, merge({ level: level }, this.context));\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// Protected instance which all calls to the to level `Logger` module will be routed through.\r\n\tvar globalLogger = new ContextualLogger({ filterLevel: Logger.OFF });\r\n\r\n\t// Configure the global Logger instance.\r\n\t(function() {\r\n\t\t// Shortcut for optimisers.\r\n\t\tvar L = Logger;\r\n\r\n\t\tL.enabledFor = bind(globalLogger, globalLogger.enabledFor);\r\n\t\tL.debug = bind(globalLogger, globalLogger.debug);\r\n\t\tL.time = bind(globalLogger, globalLogger.time);\r\n\t\tL.timeEnd = bind(globalLogger, globalLogger.timeEnd);\r\n\t\tL.info = bind(globalLogger, globalLogger.info);\r\n\t\tL.warn = bind(globalLogger, globalLogger.warn);\r\n\t\tL.error = bind(globalLogger, globalLogger.error);\r\n\r\n\t\t// Don't forget the convenience alias!\r\n\t\tL.log = L.info;\r\n\t}());\r\n\r\n\t// Set the global logging handler.  The supplied function should expect two arguments, the first being an arguments\r\n\t// object with the supplied log messages and the second being a context object which contains a hash of stateful\r\n\t// parameters which the logging function can consume.\r\n\tLogger.setHandler = function (func) {\r\n\t\tlogHandler = func;\r\n\t};\r\n\r\n\t// Sets the global logging filter level which applies to *all* previously registered, and future Logger instances.\r\n\t// (note that named loggers (retrieved via `Logger.get`) can be configured independently if required).\r\n\tLogger.setLevel = function(level) {\r\n\t\t// Set the globalLogger's level.\r\n\t\tglobalLogger.setLevel(level);\r\n\r\n\t\t// Apply this level to all registered contextual loggers.\r\n\t\tfor (var key in contextualLoggersByNameMap) {\r\n\t\t\tif (contextualLoggersByNameMap.hasOwnProperty(key)) {\r\n\t\t\t\tcontextualLoggersByNameMap[key].setLevel(level);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// Gets the global logging filter level\r\n\tLogger.getLevel = function() {\r\n\t\treturn globalLogger.getLevel();\r\n\t};\r\n\r\n\t// Retrieve a ContextualLogger instance.  Note that named loggers automatically inherit the global logger's level,\r\n\t// default context and log handler.\r\n\tLogger.get = function (name) {\r\n\t\t// All logger instances are cached so they can be configured ahead of use.\r\n\t\treturn contextualLoggersByNameMap[name] ||\r\n\t\t\t(contextualLoggersByNameMap[name] = new ContextualLogger(merge({ name: name }, globalLogger.context)));\r\n\t};\r\n\r\n\t// CreateDefaultHandler returns a handler function which can be passed to `Logger.setHandler()` which will\r\n\t// write to the window's console object (if present); the optional options object can be used to customise the\r\n\t// formatter used to format each log message.\r\n\tLogger.createDefaultHandler = function (options) {\r\n\t\toptions = options || {};\r\n\r\n\t\toptions.formatter = options.formatter || function defaultMessageFormatter(messages, context) {\r\n\t\t\t// Prepend the logger's name to the log message for easy identification.\r\n\t\t\tif (context.name) {\r\n\t\t\t\tmessages.unshift(\"[\" + context.name + \"]\");\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Map of timestamps by timer labels used to track `#time` and `#timeEnd()` invocations in environments\r\n\t\t// that don't offer a native console method.\r\n\t\tvar timerStartTimeByLabelMap = {};\r\n\r\n\t\t// Support for IE8+ (and other, slightly more sane environments)\r\n\t\tvar invokeConsoleMethod = function (hdlr, messages) {\r\n\t\t\tFunction.prototype.apply.call(hdlr, console, messages);\r\n\t\t};\r\n\r\n\t\t// Check for the presence of a logger.\r\n\t\tif (typeof console === \"undefined\") {\r\n\t\t\treturn function () { /* no console */ };\r\n\t\t}\r\n\r\n\t\treturn function(messages, context) {\r\n\t\t\t// Convert arguments object to Array.\r\n\t\t\tmessages = Array.prototype.slice.call(messages);\r\n\r\n\t\t\tvar hdlr = console.log;\r\n\t\t\tvar timerLabel;\r\n\r\n\t\t\tif (context.level === Logger.TIME) {\r\n\t\t\t\ttimerLabel = (context.name ? '[' + context.name + '] ' : '') + messages[0];\r\n\r\n\t\t\t\tif (messages[1] === 'start') {\r\n\t\t\t\t\tif (console.time) {\r\n\t\t\t\t\t\tconsole.time(timerLabel);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\ttimerStartTimeByLabelMap[timerLabel] = new Date().getTime();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (console.timeEnd) {\r\n\t\t\t\t\t\tconsole.timeEnd(timerLabel);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tinvokeConsoleMethod(hdlr, [ timerLabel + ': ' +\r\n\t\t\t\t\t\t\t(new Date().getTime() - timerStartTimeByLabelMap[timerLabel]) + 'ms' ]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// Delegate through to custom warn/error loggers if present on the console.\r\n\t\t\t\tif (context.level === Logger.WARN && console.warn) {\r\n\t\t\t\t\thdlr = console.warn;\r\n\t\t\t\t} else if (context.level === Logger.ERROR && console.error) {\r\n\t\t\t\t\thdlr = console.error;\r\n\t\t\t\t} else if (context.level === Logger.INFO && console.info) {\r\n\t\t\t\t\thdlr = console.info;\r\n\t\t\t\t} else if (context.level === Logger.DEBUG && console.debug) {\r\n\t\t\t\t\thdlr = console.debug;\r\n\t\t\t\t}\r\n\r\n\t\t\t\toptions.formatter(messages, context);\r\n\t\t\t\tinvokeConsoleMethod(hdlr, messages);\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\t// Configure and example a Default implementation which writes to the `window.console` (if present).  The\r\n\t// `options` hash can be used to configure the default logLevel and provide a custom message formatter.\r\n\tLogger.useDefaults = function(options) {\r\n\t\tLogger.setLevel(options && options.defaultLevel || Logger.DEBUG);\r\n\t\tLogger.setHandler(Logger.createDefaultHandler(options));\r\n\t};\r\n\r\n\t// Export to popular environments boilerplate.\r\n\tif (true) {\r\n\t\t!(__WEBPACK_AMD_DEFINE_FACTORY__ = (Logger),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\t}\r\n\telse if (typeof module !== 'undefined' && module.exports) {\r\n\t\tmodule.exports = Logger;\r\n\t}\r\n\telse {\r\n\t\tLogger._prevLogger = global.Logger;\r\n\r\n\t\tLogger.noConflict = function () {\r\n\t\t\tglobal.Logger = Logger._prevLogger;\r\n\t\t\treturn Logger;\r\n\t\t};\r\n\r\n\t\tglobal.Logger = Logger;\r\n\t}\r\n}(this));\r\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_9__;\n\n/***/ })\n/******/ ])[\"default\"];\n});\n\n\n// WEBPACK FOOTER //\n// playkit-offline-manager.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 1f9596bbcdcff00ae81e","//@flow\nimport * as JsLogger from 'js-logger';\n\nexport type LogLevelObject = { value: number, name: string };\nexport type LogLevelType = { [level: string]: LogLevelObject };\n\nconst LogLevel: LogLevelType = {\n  DEBUG: JsLogger.DEBUG,\n  INFO: JsLogger.INFO,\n  TIME: JsLogger.TIME,\n  WARN: JsLogger.WARN,\n  ERROR: JsLogger.ERROR,\n  OFF: JsLogger.OFF\n};\n\nJsLogger.useDefaults({defaultLevel: JsLogger.ERROR});\n\n/**\n * get a logger\n * @param {?string} name - the logger name\n * @returns {Object} - the logger class\n */\nfunction getLogger(name?: string): Object {\n  if (!name) {\n    return JsLogger;\n  }\n  return JsLogger.get(name);\n}\n\n/**\n * get the log level\n * @param {?string} name - the logger name\n * @returns {LogLevelObject} - the log level\n */\nfunction getLogLevel(name?: string): LogLevelObject {\n  return getLogger(name).getLevel();\n}\n\n/**\n * sets the logger level\n * @param {LogLevelObject} level - the log level\n * @param {?string} name - the logger name\n * @returns {void}\n */\nfunction setLogLevel(level: LogLevelObject, name?: string): void {\n  getLogger(name).setLevel(level);\n}\n\nexport default getLogger;\nexport {LogLevel, getLogLevel, setLogLevel};\n\n\n\n// WEBPACK FOOTER //\n// ./utils/logger.js","module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"commonjs\":\"playkit-js\",\"commonjs2\":\"playkit-js\",\"amd\":\"playkit-js\",\"root\":[\"KalturaPlayer\",\"core\"]}\n// module id = 1\n// module chunks = 0","// @flow\nimport idb from 'idb'\nimport getLogger from \"./utils/logger\";\nimport {Error} from 'playkit-js'\n\nconst KEY_PATH: string = 'entryId';\nconst ENTRIES_MAP_STORE_NAME: string = 'entriesMap';\nconst DB_NAME: string = 'offline-manager'\n/**\n * Your class description.\n * @classdesc\n */\nexport default class DBManager{\n\n  static _logger: any = getLogger('DBManager');\n  /**\n   * @constructor\n   * @param {Object} config - The plugin config.\n   */\n  constructor(config: Object) {\n    DBManager._logger.debug('DBManager created');\n    if (!('indexedDB' in window)) {\n     // console.log('This browser doesn\\'t support IndexedDB');\n      return;\n    }\n    this.config = config;\n    this.open(DB_NAME);\n  }\n\n  open(store){\n    this.dbPromise = idb.open(store, 1, (upgradeDb)=>{\n      DBManager._logger.debug('open');\n      if (!upgradeDb.objectStoreNames.contains(ENTRIES_MAP_STORE_NAME)) {\n        upgradeDb.createObjectStore(ENTRIES_MAP_STORE_NAME, {keyPath: KEY_PATH});\n      }\n    });\n  }\n\n  add(storeName, key ,item){\n    return this.dbPromise.then(db => {\n      DBManager._logger.debug('add');\n      let tx = db.transaction(storeName, 'readwrite');\n      let store = tx.objectStore(storeName);\n      this._addConfigToItem(item);\n      item[KEY_PATH] = key;\n      store.put(item);\n      return tx.complete;\n    }).catch((error)=> {\n      Promise.reject(new Error(Error.Severity.RECOVERABLE, Error.Category.STORAGE, Error.Code.CANNOT_ADD_ITEM, error));\n    });\n  }\n\n  remove(storeName,key){\n    return this.dbPromise.then(db => {\n      DBManager._logger.debug('remove');\n      const tx = db.transaction(storeName, 'readwrite');\n      tx.objectStore(storeName).delete(key);\n      return tx.complete;\n    }).catch(error => {\n      Promise.reject(new Error(Error.Severity.RECOVERABLE, Error.Category.STORAGE, Error.Code.REQUESTED_ITEM_NOT_FOUND, error));\n    });\n  }\n\n  get(storeName, entryId){\n    return this.dbPromise.then(db => {\n      DBManager._logger.debug('get', entryId);\n      return db.transaction(storeName)\n        .objectStore(storeName).get(entryId);\n    }).then(obj =>{\n      return obj;\n    }).catch(error => {\n      Promise.reject(new Error(Error.Severity.RECOVERABLE, Error.Category.STORAGE, Error.Code.REQUESTED_ITEM_NOT_FOUND, error));\n    });\n  }\n\n  getAll(storeName){\n    return this.dbPromise.then(db => {\n      DBManager._logger.debug('getAll');\n      return db.transaction(storeName)\n        .objectStore(storeName).getAll();\n    }).then(allObjs => {\n      return allObjs;\n    }).catch(error => {\n      Promise.reject(new Error(Error.Severity.RECOVERABLE, Error.Category.STORAGE, Error.Code.REQUESTED_ITEM_NOT_FOUND, error));\n    });\n  }\n\n  removeAll(store){\n    return store; //TODO implement\n  }\n\n  update(store,key,value){\n    DBManager._logger.debug('update');\n    return this.add(store,key,value);\n  }\n\n  _addConfigToItem(item){\n    for (let key in this.config){\n      item[key] = this.config[key];\n    }\n  }\n\n}\n\n\n\n\n\n// WEBPACK FOOTER //\n// ./db-manager.js","// @flow\nimport OfflineManager from './offline-manager'\n\ndeclare var __VERSION__: string;\ndeclare var __NAME__: string;\nexport default OfflineManager;\nexport {OfflineManager}\nexport {__VERSION__ as VERSION, __NAME__ as NAME};\n\n\n\n// WEBPACK FOOTER //\n// ./index.js","// @flow\nimport {ShakaOfflineProvider, PROGRESS_EVENT} from \"./shaka-offline-provider\";\nimport {Provider} from 'playkit-js-providers';\nimport {Utils, FakeEventTarget, EventManager, Error, EventType as EVENTS, FakeEvent} from 'playkit-js';\nimport getLogger, {setLogLevel, LogLevel} from './utils/logger'\nimport DBManager from \"./db-manager\";\n\n\nconst downloadStates = {\n  DOWNLOADING: 'downloading',\n  PAUSED: 'paused',\n  RESUMED: 'resumed',\n  ENDED: 'ended',\n  ERROR: 'error'\n};\n\nconst ENTRIES_MAP_STORE_NAME = 'entriesMap';\n\nconst DOWNLOAD_PARAM = '?playbackType=offline';\n\nconst NOT_SUPPORTED_SOURCE_TYPES = ['hls','progressive'];\n\nconst SUPPORTED_SOURCE = 'dash';\n/**\n * Your class description.\n * @classdesc\n */\nexport default class OfflineManager extends FakeEventTarget {\n\n  static _logger: any = getLogger('OfflineManager');\n\n  /**\n   * TODO: Define under what conditions the plugin is valid.\n   * @static\n   * @public\n   * @returns {boolean} - Whether the plugin is valid.\n   */\n  static isValid(): boolean {\n    return true;\n  }\n\n  /**\n   * @constructor\n   * @param {Object} config - The plugin config.\n   */\n  constructor(config) {\n    if (config.logLevel && LogLevel[config.logLevel]) {\n      setLogLevel(LogLevel[config.logLevel]);\n    }\n    OfflineManager._logger.debug('offline manager created');\n    super();\n    if (this._downloads) {\n      return;\n    }\n    this._downloads = {};\n    this._config = config;\n    this._eventManager = new EventManager();\n    this._dbManager = new DBManager({});\n    this._setOfflineAdapter();\n    this._isDBSynced = false;\n  }\n\n  _setOfflineAdapter(): void {\n    this._offlineProvider = new ShakaOfflineProvider(this._downloads, this._config);\n    this._eventManager.listen(this._offlineProvider, PROGRESS_EVENT, (e) => {\n      this.dispatchEvent(e);\n    });\n  }\n\n  /**\n   * This function gets the configuration (and info) from the provider.\n   * @param mediaInfo\n   * @returns {Promise<any>}\n   */\n  getMediaConfig(mediaInfo: Object): Promise<*> {\n    OfflineManager._logger.debug('get media info started', mediaInfo.id);\n    return new Promise((resolve) => {\n      if (this._downloads[mediaInfo.id]) {\n        return resolve(this._downloads[mediaInfo.id].sources.dash[0]);\n      }\n      const provider = new Provider(this._config.provider);\n      return provider.getMediaConfig(mediaInfo)\n        .then(mediaConfig => {\n          if (Utils.Object.hasPropertyPath(mediaConfig, 'sources.dash') && mediaConfig.sources.dash.length > 0) {\n            mediaConfig = this._removeNotRelevantSources(mediaConfig);\n            let sourceData = mediaConfig.sources.dash[0];\n            sourceData.id = mediaConfig.sources.id;\n            this._downloads[mediaConfig.sources.id] = mediaConfig;\n            OfflineManager._logger.debug('get media info ended');\n            return resolve(sourceData);\n          } else {\n            this._onError(new Error(Error.Severity.RECOVERABLE, Error.Category.STORAGE, Error.Code.COULD_NOT_GET_INFO_FROM_MEDIA_PROVIDER));\n          }\n        });\n    })\n  }\n\n  /**\n   * This function pauses a download\n   * @param entryId\n   * @returns {Promise<any>}\n   */\n  pause(entryId): Promise<*> {\n    return new Promise((resolve) => {\n      OfflineManager._logger.debug('pause start', entryId);\n      let currentDownload = this._downloads[entryId];\n      if (!currentDownload) {\n        this._onError(new Error(Error.Severity.RECOVERABLE, Error.Category.STORAGE, Error.Code.ENTRY_DOES_NOT_EXIST, entryId)); //TODO LOG THIS (until background fetch is here)\n      } else {\n        this._recoverEntry(entryId);\n        if ([downloadStates.DOWNLOADING, downloadStates.RESUMED].includes(currentDownload.state)) {\n          return this._offlineProvider.pause(entryId).then(() => {\n            currentDownload.state = downloadStates.PAUSED;\n            return this._dbManager.update(ENTRIES_MAP_STORE_NAME, entryId, this._offlineProvider.prepareItemForStorage(currentDownload)).then(() => {\n              OfflineManager._logger.debug('paused ended', entryId);\n              resolve({\n                entryId: entryId,\n                state: downloadStates.PAUSE\n              });\n            });\n          }).catch((error) => {\n            this._onError(new Error(Error.Severity.RECOVERABLE, Error.Category.STORAGE, Error.Code.PAUSE_ABORTERD, error));\n          });\n        } else {\n          return resolve();\n        }\n      }\n    });\n  }\n\n  /**\n   * This function resumes a download\n   * @param entryId\n   * @returns {Promise<*>}\n   */\n  resume(entryId): Promise<*> {\n    OfflineManager._logger.debug('resume started', entryId);\n    return this._offlineProvider.setSessionData(entryId).then(() => {\n      let currentDownload = this._downloads[entryId];\n      this._recoverEntry(entryId);\n      if (currentDownload.state === downloadStates.PAUSED) {\n        currentDownload.state = downloadStates.RESUMED;\n        this._offlineProvider.resume(entryId).then((manifestDB) => {\n          currentDownload.state = [manifestDB.downloadStatus, manifestDB.ob].includes(downloadStates.ENDED) ? downloadStates.ENDED : downloadStates.PAUSED;\n          this._dbManager.update(ENTRIES_MAP_STORE_NAME, entryId, this._offlineProvider.prepareItemForStorage(currentDownload)).then(() => {\n            OfflineManager._logger.debug('resume ended / paused', entryId);\n            return Promise.resolve({\n              state: currentDownload.state,\n              entryId: entryId\n            });\n          })\n        });\n      }\n    }).catch((error) => {\n      this._onError(new Error(Error.Severity.RECOVERABLE, Error.Category.STORAGE, Error.Code.RESUME_REJECTED, error));\n    });\n  }\n\n  /**\n   * This function gets an entryId and renew it's DRM license from the server\n   * @param entryId\n   * @returns {Promise<T>}\n   */\n  renewLicense(entryId): Promise<*> {\n    OfflineManager._logger.debug('renew license started', entryId);\n    const provider = new Provider(this._config.provider);\n    return provider.getMediaConfig({\n      entryId: entryId\n    }).then(mediaConfig => {\n      if (!Utils.Object.hasPropertyPath(mediaConfig, 'sources.dash') && mediaConfig.sources.dash.length > 0) {\n        this._onError(new Error(Error.Severity.RECOVERABLE, Error.Category.STORAGE, Error.Code.RENEW_LICENSE_FAILED, 'not enough data from the media provider'));\n      }\n      return this._offlineProvider.setSessionData(entryId, mediaConfig).then(() => {\n        let currentDownload = this._downloads[entryId];\n        if (currentDownload.state === downloadStates.ENDED) {\n          this._offlineProvider.renewLicense(entryId).then((expiration) => {\n            this._dbManager.update(ENTRIES_MAP_STORE_NAME, entryId, this._offlineProvider.prepareItemForStorage(currentDownload)).then(() => {\n              OfflineManager._logger.debug('renew license ended', entryId);\n              return Promise.resolve({\n                state: currentDownload.state,\n                entryId: entryId,\n                expiration: expiration\n              });\n            })\n          });\n        }\n      })\n    }).catch((error) => {\n      this._onError(new Error(Error.Severity.RECOVERABLE, Error.Category.STORAGE, Error.Code.RENEW_LICENSE_FAILED, error));\n    });\n  }\n\n  download(entryId: string, options: Object): Promise<*> {\n    return new Promise((resolve) => {\n      OfflineManager._logger.debug('download start', entryId);\n      let currentDownload = this._downloads[entryId];\n      if (currentDownload.state) {\n        this._onError(new Error(Error.Severity.RECOVERABLE, Error.Category.STORAGE, Error.Code.ENTRY_ALREADY_EXISTS, entryId));\n        return;\n      }\n      this._doesEntryExists(entryId).then(existsInDB => {\n        if (existsInDB) {\n          this._onError(new Error(Error.Severity.RECOVERABLE, Error.Category.STORAGE, Error.Code.ENTRY_ALREADY_EXISTS, entryId));\n          return;\n        }\n        currentDownload['state'] = downloadStates.DOWNLOADING;\n        this._addDownloadParam(entryId);\n        this._offlineProvider.download(entryId, options)\n          .then(() => {\n            return this._dbManager.update(ENTRIES_MAP_STORE_NAME, entryId, this._offlineProvider.prepareItemForStorage(currentDownload));\n          })\n          .then(() => {\n            OfflineManager._logger.debug('download ended / paused', entryId);\n            resolve({\n              state: currentDownload.state,\n              entryId: entryId\n            });\n          }).catch((error) => {\n          this._onError(new Error(Error.Severity.RECOVERABLE, Error.Category.STORAGE, Error.Code.DOWNLOAD_ABORTED, error));\n        });\n      });\n    });\n  }\n\n  remove(entryId: string): Promise<*> {\n    OfflineManager._logger.debug('remove start', entryId);\n    return this._offlineProvider.setSessionData(entryId).then(() => {\n      let currentDownload = this._downloads[entryId];\n      if (!currentDownload.state) {\n        this._onError(new Error(Error.Severity.RECOVERABLE, Error.Category.STORAGE, Error.Code.REQUESTED_ITEM_NOT_FOUND));\n      }\n      this._offlineProvider.remove(entryId).then(() => {\n        this._dbManager.remove(ENTRIES_MAP_STORE_NAME, entryId).then(() => {\n          delete this._downloads[entryId];\n          OfflineManager._logger.debug('remove ended', entryId);\n          return Promise.resolve({\n            state: currentDownload.state,\n            entryId: entryId\n          });\n        })\n      });\n    }).catch((error) => {\n      this._onError(new Error(Error.Severity.RECOVERABLE, Error.Category.STORAGE, Error.Code.REMOVE_REJECTED, error));\n    });\n  }\n\n\n  removeAll(): Promise<*> {\n    let promises = [];\n    return this.getAllDownloads().then(downloads => {\n      downloads.forEach(download => {\n        promises.push(this.remove(download.sources.id));\n      });\n      this._downloads = {};\n      return Promise.all(promises);\n    });\n  }\n\n  pauseAll(): Promise<*> {\n    let promises = [];\n    return this.getAllDownloads().then(downloads => {\n      downloads.forEach(download => {\n        promises.push(this.pause(download.sources.id));\n      });\n      return Promise.all(promises);\n    });\n  }\n\n  getExpiration(entryId): Promise<*> {\n    return this.getDownloadedMediaConfig(entryId).then(data => {\n      return data.expiration;\n    });\n  }\n\n  /**\n   * Getting the full media config of an entry from the indexed db. It contains the full provider info\n   * the status of the download, actual size of the entry, expected size (full size) and drm expiration date.\n   * @param entryId\n   * @returns {*}\n   */\n  getDownloadedMediaConfig(entryId: string): Promise<*> {\n    OfflineManager._logger.debug('getDownloadedMediaConfig', entryId);\n    return this._dbManager.get(ENTRIES_MAP_STORE_NAME, entryId);\n  }\n\n  /**\n   * Getting all the in progress, ended, resumed, paused and ended downloads.\n   * @returns {Promise<Array<Object>>}\n   */\n  getAllDownloads(): Promise<*> {\n    if (this._isDBSynced) {\n      return Promise.resolve(this._getReducedDownloadObjectsData());\n    }\n    return this._dbManager.getAll(ENTRIES_MAP_STORE_NAME).then(dbDownloads => {\n      this._isDBSynced = true;\n      dbDownloads.forEach((download) => {\n        const entryId = download.sources.id;\n        if (!this._downloads[entryId]) {\n          this._downloads[entryId] = download;\n          this._recoverEntry(entryId);\n        }\n      });\n      return Promise.resolve(this._getReducedDownloadObjectsData());\n    });\n  }\n\n  /**\n   * add parameter to the manifest url so the server will know it's only for downloading and not playing (stats purpose)\n   * @param entryId\n   * @private\n   */\n  _addDownloadParam(entryId: string): void {\n    let currentDownload = this._downloads[entryId];\n    currentDownload.sources.dash[0].url = currentDownload.sources.dash[0].url + DOWNLOAD_PARAM;\n  }\n\n  /**\n   * checking if an entry exists already in the DB.\n   * @param entryId\n   * @returns {Promise<any>}\n   * @private\n   */\n  _doesEntryExists(entryId): Promise<*> {\n    return new Promise((resolve) => {\n      return this.getDownloadedMediaConfig(entryId).then((entry) => {\n        resolve(entry && entry.state);\n      })\n    })\n  }\n\n  /**\n   * Removing  sources that we are not downloading from the media config\n   * currently as we are having only dash adapter, we will take the first dash source.\n   * @param {Object} mediaConfig\n   * @private\n   */\n  _removeNotRelevantSources(mediaConfig: Object): Object {\n    for (let key in mediaConfig.sources) {\n      let source = mediaConfig.sources[key];\n      if (NOT_SUPPORTED_SOURCE_TYPES.includes(key)) {\n        delete mediaConfig.sources[key];\n      } else if (key === SUPPORTED_SOURCE) {\n        source = source.slice(1);\n      }\n    }\n    return Object.assign({}, mediaConfig);\n  }\n\n  /**\n   * The indexed db can contain corrupted values regarding a download if something goes wrong.\n   * for example, it can has a \"downloading\" state while there is nothing downloaded,\n   * if a download was interrupted unexpectedly (browser crash e.g).\n   * this function handles this.\n   * @private\n   */\n  _recoverEntry(entryId) {\n    let currEntry = this._downloads[entryId];\n    if (!currEntry || currEntry.recovered) {\n      return;\n    } else {\n      if (currEntry.state === downloadStates.DOWNLOADING || currEntry.state === downloadStates.RESUMED){\n        currEntry.state=downloadStates.PAUSED;\n      }\n      currEntry.recovered = true;\n    }\n  }\n\n  /**\n   * get a reduced and normalized version of the provider data.\n   * @returns {Array<Object>}\n   * @private\n   */\n  _getReducedDownloadObjectsData() {\n    return Object.keys(this._downloads).map(i => {\n      const item = this._downloads[i];\n      return {\n        id: item.sources.id,\n        metadata: item.sources.metadata,\n        poster: item.sources.poster,\n        expectedSize: item.expectedSize,\n        size: item.size,\n        expiration: item.expiration,\n        state: item.state\n      };\n    });\n  }\n\n  /**\n   * Error handler, dispatches an error object\n   * @param error\n   * @private\n   */\n  _onError(error: Error): void {\n    let event = new FakeEvent(EVENTS.ERROR, error);\n    this.dispatchEvent(event);\n  }\n\n  /**\n   * TODO: Define the destroy logic of your plugin.\n   * Destroys the plugin.\n   * @override\n   * @public\n   * @returns {void}\n   */\n  destroy(): void {\n    // Write logic\n    this._eventManager.destroy();\n  }\n\n  /**\n   * TODO: Define the reset logic of your plugin.\n   * Resets the plugin.\n   * @override\n   * @public\n   * @returns {void}\n   */\n  reset(): void {\n    // Write logic\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./offline-manager.js","//flow\nimport shaka from 'shaka-player'\nimport DBManager from './db-manager';\nimport {FakeEventTarget, FakeEvent, Error, EventType as EVENTS} from 'playkit-js'\nimport getLogger from './utils/logger'\n\nconst downloadStates = {\n  DOWNLOADING: 'downloading',\n  PAUSED: 'paused',\n  RESUMED: 'resumed',\n  ENDED: 'ended'\n};\n\nconst ENTRIES_MAP_STORE_NAME = 'entriesMap';\n\nexport const PROGRESS_EVENT = 'progress';\n\nexport class ShakaOfflineProvider extends FakeEventTarget {\n\n  static _logger: any = getLogger('ShakaOfflineProvider');\n\n  constructor(downloads) {\n    super();\n    ShakaOfflineProvider._logger.debug('ShakaOfflineProvider created');\n    this._dtgVideoElement = document.createElement('video');\n    shaka.polyfill.installAll();\n    this._dtgShaka = new shaka.Player(this._dtgVideoElement);\n    this._configureShakaPlayer();\n    this._dtgShaka.addEventListener(EVENTS.ERROR, this._onShakaError);\n    // todo remove this as part of the classes refactor, adding the offline provider config should be on \"item.prepareforstorage()\"\n    this._dbManager = new DBManager({\n      adapterName: 'shaka',\n      adapterVersion: \"\",//player.version,\n      playerVersion: \"\"//player.version\n    });\n    this._downloads = downloads;\n  }\n\n  _configureShakaPlayer(): void {\n    this._dtgShaka.configure({\n      streaming: {\n        retryParameters: {\n          timeout: 0,       // timeout in ms, after which we abort a request; 0 means never\n          maxAttempts: 100,   // the maximum number of requests before we fail\n          baseDelay: 1000,  // the base delay in ms between retries\n          backoffFactor: 2, // the multiplicative backoff factor between retries\n          fuzzFactor: 0.5  // the fuzz factor to apply to each retry delay\n        }\n      }\n    });\n  }\n\n  download(entryId: String, options): Promise<*> {\n    return new Promise((resolve, reject) => {\n      ShakaOfflineProvider._logger.debug('download', entryId);\n      let currentDownload = this._downloads[entryId];\n      this._configureDrmIfNeeded(entryId);\n      currentDownload['storage'] = this._initStorage(entryId, options);\n      // first store manifest\n      currentDownload.storage.storeManifest(currentDownload.sources.dash[0].url, {}).then(manifest=>{\n        ShakaOfflineProvider._logger.debug('after storage.storeManifest', entryId);\n        currentDownload.state = downloadStates.DOWNLOADING;\n        currentDownload.recovered = true;\n        currentDownload.sources.dash[0].url = manifest.offlineUri;\n        currentDownload.expiration = manifest.expiration;\n        currentDownload.expectedSize = manifest.expectedSize;\n        currentDownload.size = 0;\n        return this._dbManager.add(ENTRIES_MAP_STORE_NAME, entryId, this.prepareItemForStorage(currentDownload));\n      }).then(() => {\n        // then download the content\n        return currentDownload.storage.download(currentDownload.sources.dash[0].url)\n      }).then((manifest) => {\n        currentDownload.size = manifest.size;\n        currentDownload.state = manifest.downloadStatus;\n        resolve();\n      }).catch((error) => {\n        reject(new Error(Error.Severity.RECOVERABLE, Error.Category.STORAGE, Error.Code.DOWNLOAD_ABORTED, error));\n      });\n    })\n  }\n\n  pause(entryId: string): Promise<*> {\n    ShakaOfflineProvider._logger.debug('pause', entryId);\n    const currentDownload = this._downloads[entryId];\n    return currentDownload.storage.pause();\n  }\n\n  resume(entryId: string): Promise<*> {\n    ShakaOfflineProvider._logger.debug('resume', entryId);\n    const currentDownload = this._downloads[entryId];\n    return currentDownload.storage.download(currentDownload.sources.dash[0].url);\n  }\n\n  remove(entryId): Promise<*> {\n    ShakaOfflineProvider._logger.debug('remove', entryId);\n    const currentDownload = this._downloads[entryId];\n    // in case of removing a download in progress, we have to pause the download and wait for the\n    // store promise to be resolved. Only then we will have the shaka offline storage uri, so it can be deleted\n    // from the shaka indexed db as well.\n    let pausePromise = currentDownload.state === downloadStates.ENDED ? Promise.resolve() : this.pause(entryId);\n    let storePormise = currentDownload.storePromise || Promise.resolve();\n    return Promise.all([pausePromise, storePormise]).then(() => {\n      currentDownload.storage = this._initStorage(entryId, {action: 'remove'});\n      return currentDownload.storage.remove(currentDownload.sources.dash[0].url);\n    });\n  }\n\n  renewLicense(entryId): Promise<*> {\n    ShakaOfflineProvider._logger.debug('renewLicense', entryId);\n    const currentDownload = this._downloads[entryId];\n    this._configureDrmIfNeeded(entryId);\n    currentDownload['storage'] = this._initStorage(entryId, {});\n    return currentDownload.storage.renewLicense(currentDownload.sources.dash[0].url).then(manifestDB => {\n      currentDownload.expiration = manifestDB.expiration;\n      return Promise.resolve(manifestDB.expiration);\n    });\n  }\n\n  getDataByEntry(entryId): Promise<*> {\n    return this._dbManager.get(ENTRIES_MAP_STORE_NAME, entryId);\n  }\n\n  getAllDownloads(): Promise<*> {\n    return this._dbManager.getAll(ENTRIES_MAP_STORE_NAME);\n  }\n\n  _onShakaError(event: any): void {\n    if (event && event.detail) {\n      const error = event.detail;\n      //currently we don't handle video element errors on the offline shaka\n      if (error.code === this.VIDEO_ERROR_CODE) {\n        ShakaOfflineProvider._logger.error(error);\n        return;\n      }\n\n      const playerError = new Error(\n        error.severity,\n        error.category,\n        error.code,\n        error.data);\n      ShakaOfflineProvider._logger.error(playerError);\n      this.dispatchEvent(new FakeEvent(EVENTS.ERROR, {\n        detail: playerError\n      }));\n    }\n  }\n\n  _configureDrmIfNeeded(entryId) {\n    ShakaOfflineProvider._logger.debug('configure drm if needed', entryId);\n    let currentDownload = this._downloads[entryId];\n    const drmData = currentDownload.sources.dash[0].drmData;\n    if (drmData) {\n      let servers = {};\n      drmData.forEach((val) => {\n        servers[val.scheme] = val.licenseUrl;\n      });\n      this._dtgShaka.configure({'drm': {'servers': servers}})\n    } else {\n      this._dtgShaka.configure({});\n    }\n  }\n\n  prepareItemForStorage(object) {\n    const keysToDelete = [\"storage\", \"url\", \"mimetype\", \"storePromise\", \"recovered\"];\n    let storeObj = Object.assign({}, object);\n    for (let key in storeObj) {\n      if (keysToDelete.includes(key)) {\n        delete storeObj[key];\n      }\n    }\n    let selectedSource = object.sources.dash[0];\n    selectedSource['localSource'] = true;\n    object.sources.dash = [selectedSource]; // storing only one relevant source\n    return storeObj;\n  }\n\n\n  /**\n   * This function makes an entry ready to be used by the download manager.\n   * It gets the entry data from DB, it refreshes the drm data and create a shaka storage\n   * object if one was not created already.\n   * @param entryId\n   * @param newMediaInfo - new mediaInfo from the server (used for renewDRM) TODO: pass only drm data?\n   * @returns {Promise<any>}\n   */\n  setSessionData(entryId, newMediaInfo): Promise<*> {\n    ShakaOfflineProvider._logger.debug('set session data', entryId);\n    return new Promise((resolve, reject) => {\n      if (this._downloads[entryId]) {\n        return resolve();\n      }\n      return this.getDataByEntry(entryId).then(dbData => {\n        let data = Object.assign({}, dbData);\n        this._downloads[entryId] = data;\n        return resolve();\n      }).catch(error => {\n        reject(error);\n      });\n    }).then(() => {\n      let currentDownload = this._downloads[entryId];\n      currentDownload.storage = currentDownload.storage ? currentDownload.storage : this._initStorage(entryId);\n      this._updateDrmDataIfNeeded(entryId, newMediaInfo);\n      return Promise.resolve();\n    }).catch(error => {\n      Promise.reject(error);\n    });\n  }\n\n  _updateDrmDataIfNeeded(entryId, newMediaInfo) {\n    if (!newMediaInfo) {\n      return;\n    }\n    let currentDownload_ = this._downloads[entryId];\n    if (currentDownload_.sources.dash[0].drmData && newMediaInfo.sources.dash[0].drmData) {\n      currentDownload_.sources.dash[0].drmData = newMediaInfo.sources.dash[0].drmData;\n    }\n  }\n\n  _trackSelectionCallback(bitrate = 0, language = null) {\n    return function (tracks) {\n      const textTracks = tracks.filter(track => {\n        return track.type === 'text'\n      });\n      const langFilteredTracks = tracks.filter(track => {\n        return track.language === language && track.type !== 'text'\n      });\n      tracks = langFilteredTracks.length > 0 ? langFilteredTracks : tracks;\n      let closest = tracks.reduce(function (prev, curr) {\n        return (Math.abs(curr.bandwidth - bitrate) < Math.abs(prev.bandwidth - bitrate) ? curr : prev);\n      });\n      return [closest].concat(textTracks);\n    }\n  }\n\n  _initStorage(entryId, options = {}) {\n    ShakaOfflineProvider._logger.debug('init storage', entryId);\n    let storage = new shaka.offline.Storage(this._dtgShaka);\n    let configuration = {\n      usePersistentLicense: true\n    };\n    if (options.bitrate || options.language){\n      configuration[\"trackSelectionCallback\"] = this._trackSelectionCallback(options.bitrate, options.language);\n    }\n    if (!options.action || options.action !== 'remove'){\n      configuration[\"progressCallback\"] = this._setDownloadProgress(entryId);\n    }\n    storage.configure(configuration);\n    return storage;\n  }\n\n  _setDownloadProgress(entryId) {\n    ShakaOfflineProvider._logger.debug('set download progress', entryId);\n    return (content, progress) => {\n      let currentDownload_ = this._downloads[entryId];\n      currentDownload_.size = content.size;\n      this._dbManager.update(ENTRIES_MAP_STORE_NAME, entryId, this.prepareItemForStorage(currentDownload_));\n      let event = new FakeEvent(PROGRESS_EVENT, {\n        detail: {\n          content: content,\n          progress: progress * 100,\n          entryId: entryId\n        },\n        details: {\n          content: content,\n          progress: progress * 100,\n          entryId: entryId\n        }\n      });\n      this.dispatchEvent(event);\n    }\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./shaka-offline-provider.js","module.exports = __WEBPACK_EXTERNAL_MODULE_6__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"commonjs\":\"shaka-player\",\"commonjs2\":\"shaka-player\",\"amd\":\"shaka-player\",\"root\":[\"KalturaPlayer\",\"shaka\"]}\n// module id = 6\n// module chunks = 0","'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      request.onupgradeneeded = function(event) {\n        if (upgradeCallback) {\n          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n        }\n      };\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n    module.exports.default = module.exports;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/idb/lib/idb.js\n// module id = 7\n// module chunks = 0","/*!\r\n * js-logger - http://github.com/jonnyreeves/js-logger\r\n * Jonny Reeves, http://jonnyreeves.co.uk/\r\n * js-logger may be freely distributed under the MIT license.\r\n */\r\n(function (global) {\r\n\t\"use strict\";\r\n\r\n\t// Top level module for the global, static logger instance.\r\n\tvar Logger = { };\r\n\r\n\t// For those that are at home that are keeping score.\r\n\tLogger.VERSION = \"1.4.1\";\r\n\r\n\t// Function which handles all incoming log messages.\r\n\tvar logHandler;\r\n\r\n\t// Map of ContextualLogger instances by name; used by Logger.get() to return the same named instance.\r\n\tvar contextualLoggersByNameMap = {};\r\n\r\n\t// Polyfill for ES5's Function.bind.\r\n\tvar bind = function(scope, func) {\r\n\t\treturn function() {\r\n\t\t\treturn func.apply(scope, arguments);\r\n\t\t};\r\n\t};\r\n\r\n\t// Super exciting object merger-matron 9000 adding another 100 bytes to your download.\r\n\tvar merge = function () {\r\n\t\tvar args = arguments, target = args[0], key, i;\r\n\t\tfor (i = 1; i < args.length; i++) {\r\n\t\t\tfor (key in args[i]) {\r\n\t\t\t\tif (!(key in target) && args[i].hasOwnProperty(key)) {\r\n\t\t\t\t\ttarget[key] = args[i][key];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn target;\r\n\t};\r\n\r\n\t// Helper to define a logging level object; helps with optimisation.\r\n\tvar defineLogLevel = function(value, name) {\r\n\t\treturn { value: value, name: name };\r\n\t};\r\n\r\n\t// Predefined logging levels.\r\n\tLogger.DEBUG = defineLogLevel(1, 'DEBUG');\r\n\tLogger.INFO = defineLogLevel(2, 'INFO');\r\n\tLogger.TIME = defineLogLevel(3, 'TIME');\r\n\tLogger.WARN = defineLogLevel(4, 'WARN');\r\n\tLogger.ERROR = defineLogLevel(8, 'ERROR');\r\n\tLogger.OFF = defineLogLevel(99, 'OFF');\r\n\r\n\t// Inner class which performs the bulk of the work; ContextualLogger instances can be configured independently\r\n\t// of each other.\r\n\tvar ContextualLogger = function(defaultContext) {\r\n\t\tthis.context = defaultContext;\r\n\t\tthis.setLevel(defaultContext.filterLevel);\r\n\t\tthis.log = this.info;  // Convenience alias.\r\n\t};\r\n\r\n\tContextualLogger.prototype = {\r\n\t\t// Changes the current logging level for the logging instance.\r\n\t\tsetLevel: function (newLevel) {\r\n\t\t\t// Ensure the supplied Level object looks valid.\r\n\t\t\tif (newLevel && \"value\" in newLevel) {\r\n\t\t\t\tthis.context.filterLevel = newLevel;\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t// Gets the current logging level for the logging instance\r\n\t\tgetLevel: function () {\r\n\t\t\treturn this.context.filterLevel;\r\n\t\t},\r\n\r\n\t\t// Is the logger configured to output messages at the supplied level?\r\n\t\tenabledFor: function (lvl) {\r\n\t\t\tvar filterLevel = this.context.filterLevel;\r\n\t\t\treturn lvl.value >= filterLevel.value;\r\n\t\t},\r\n\r\n\t\tdebug: function () {\r\n\t\t\tthis.invoke(Logger.DEBUG, arguments);\r\n\t\t},\r\n\r\n\t\tinfo: function () {\r\n\t\t\tthis.invoke(Logger.INFO, arguments);\r\n\t\t},\r\n\r\n\t\twarn: function () {\r\n\t\t\tthis.invoke(Logger.WARN, arguments);\r\n\t\t},\r\n\r\n\t\terror: function () {\r\n\t\t\tthis.invoke(Logger.ERROR, arguments);\r\n\t\t},\r\n\r\n\t\ttime: function (label) {\r\n\t\t\tif (typeof label === 'string' && label.length > 0) {\r\n\t\t\t\tthis.invoke(Logger.TIME, [ label, 'start' ]);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\ttimeEnd: function (label) {\r\n\t\t\tif (typeof label === 'string' && label.length > 0) {\r\n\t\t\t\tthis.invoke(Logger.TIME, [ label, 'end' ]);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t// Invokes the logger callback if it's not being filtered.\r\n\t\tinvoke: function (level, msgArgs) {\r\n\t\t\tif (logHandler && this.enabledFor(level)) {\r\n\t\t\t\tlogHandler(msgArgs, merge({ level: level }, this.context));\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// Protected instance which all calls to the to level `Logger` module will be routed through.\r\n\tvar globalLogger = new ContextualLogger({ filterLevel: Logger.OFF });\r\n\r\n\t// Configure the global Logger instance.\r\n\t(function() {\r\n\t\t// Shortcut for optimisers.\r\n\t\tvar L = Logger;\r\n\r\n\t\tL.enabledFor = bind(globalLogger, globalLogger.enabledFor);\r\n\t\tL.debug = bind(globalLogger, globalLogger.debug);\r\n\t\tL.time = bind(globalLogger, globalLogger.time);\r\n\t\tL.timeEnd = bind(globalLogger, globalLogger.timeEnd);\r\n\t\tL.info = bind(globalLogger, globalLogger.info);\r\n\t\tL.warn = bind(globalLogger, globalLogger.warn);\r\n\t\tL.error = bind(globalLogger, globalLogger.error);\r\n\r\n\t\t// Don't forget the convenience alias!\r\n\t\tL.log = L.info;\r\n\t}());\r\n\r\n\t// Set the global logging handler.  The supplied function should expect two arguments, the first being an arguments\r\n\t// object with the supplied log messages and the second being a context object which contains a hash of stateful\r\n\t// parameters which the logging function can consume.\r\n\tLogger.setHandler = function (func) {\r\n\t\tlogHandler = func;\r\n\t};\r\n\r\n\t// Sets the global logging filter level which applies to *all* previously registered, and future Logger instances.\r\n\t// (note that named loggers (retrieved via `Logger.get`) can be configured independently if required).\r\n\tLogger.setLevel = function(level) {\r\n\t\t// Set the globalLogger's level.\r\n\t\tglobalLogger.setLevel(level);\r\n\r\n\t\t// Apply this level to all registered contextual loggers.\r\n\t\tfor (var key in contextualLoggersByNameMap) {\r\n\t\t\tif (contextualLoggersByNameMap.hasOwnProperty(key)) {\r\n\t\t\t\tcontextualLoggersByNameMap[key].setLevel(level);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// Gets the global logging filter level\r\n\tLogger.getLevel = function() {\r\n\t\treturn globalLogger.getLevel();\r\n\t};\r\n\r\n\t// Retrieve a ContextualLogger instance.  Note that named loggers automatically inherit the global logger's level,\r\n\t// default context and log handler.\r\n\tLogger.get = function (name) {\r\n\t\t// All logger instances are cached so they can be configured ahead of use.\r\n\t\treturn contextualLoggersByNameMap[name] ||\r\n\t\t\t(contextualLoggersByNameMap[name] = new ContextualLogger(merge({ name: name }, globalLogger.context)));\r\n\t};\r\n\r\n\t// CreateDefaultHandler returns a handler function which can be passed to `Logger.setHandler()` which will\r\n\t// write to the window's console object (if present); the optional options object can be used to customise the\r\n\t// formatter used to format each log message.\r\n\tLogger.createDefaultHandler = function (options) {\r\n\t\toptions = options || {};\r\n\r\n\t\toptions.formatter = options.formatter || function defaultMessageFormatter(messages, context) {\r\n\t\t\t// Prepend the logger's name to the log message for easy identification.\r\n\t\t\tif (context.name) {\r\n\t\t\t\tmessages.unshift(\"[\" + context.name + \"]\");\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Map of timestamps by timer labels used to track `#time` and `#timeEnd()` invocations in environments\r\n\t\t// that don't offer a native console method.\r\n\t\tvar timerStartTimeByLabelMap = {};\r\n\r\n\t\t// Support for IE8+ (and other, slightly more sane environments)\r\n\t\tvar invokeConsoleMethod = function (hdlr, messages) {\r\n\t\t\tFunction.prototype.apply.call(hdlr, console, messages);\r\n\t\t};\r\n\r\n\t\t// Check for the presence of a logger.\r\n\t\tif (typeof console === \"undefined\") {\r\n\t\t\treturn function () { /* no console */ };\r\n\t\t}\r\n\r\n\t\treturn function(messages, context) {\r\n\t\t\t// Convert arguments object to Array.\r\n\t\t\tmessages = Array.prototype.slice.call(messages);\r\n\r\n\t\t\tvar hdlr = console.log;\r\n\t\t\tvar timerLabel;\r\n\r\n\t\t\tif (context.level === Logger.TIME) {\r\n\t\t\t\ttimerLabel = (context.name ? '[' + context.name + '] ' : '') + messages[0];\r\n\r\n\t\t\t\tif (messages[1] === 'start') {\r\n\t\t\t\t\tif (console.time) {\r\n\t\t\t\t\t\tconsole.time(timerLabel);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\ttimerStartTimeByLabelMap[timerLabel] = new Date().getTime();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (console.timeEnd) {\r\n\t\t\t\t\t\tconsole.timeEnd(timerLabel);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tinvokeConsoleMethod(hdlr, [ timerLabel + ': ' +\r\n\t\t\t\t\t\t\t(new Date().getTime() - timerStartTimeByLabelMap[timerLabel]) + 'ms' ]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// Delegate through to custom warn/error loggers if present on the console.\r\n\t\t\t\tif (context.level === Logger.WARN && console.warn) {\r\n\t\t\t\t\thdlr = console.warn;\r\n\t\t\t\t} else if (context.level === Logger.ERROR && console.error) {\r\n\t\t\t\t\thdlr = console.error;\r\n\t\t\t\t} else if (context.level === Logger.INFO && console.info) {\r\n\t\t\t\t\thdlr = console.info;\r\n\t\t\t\t} else if (context.level === Logger.DEBUG && console.debug) {\r\n\t\t\t\t\thdlr = console.debug;\r\n\t\t\t\t}\r\n\r\n\t\t\t\toptions.formatter(messages, context);\r\n\t\t\t\tinvokeConsoleMethod(hdlr, messages);\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\t// Configure and example a Default implementation which writes to the `window.console` (if present).  The\r\n\t// `options` hash can be used to configure the default logLevel and provide a custom message formatter.\r\n\tLogger.useDefaults = function(options) {\r\n\t\tLogger.setLevel(options && options.defaultLevel || Logger.DEBUG);\r\n\t\tLogger.setHandler(Logger.createDefaultHandler(options));\r\n\t};\r\n\r\n\t// Export to popular environments boilerplate.\r\n\tif (typeof define === 'function' && define.amd) {\r\n\t\tdefine(Logger);\r\n\t}\r\n\telse if (typeof module !== 'undefined' && module.exports) {\r\n\t\tmodule.exports = Logger;\r\n\t}\r\n\telse {\r\n\t\tLogger._prevLogger = global.Logger;\r\n\r\n\t\tLogger.noConflict = function () {\r\n\t\t\tglobal.Logger = Logger._prevLogger;\r\n\t\t\treturn Logger;\r\n\t\t};\r\n\r\n\t\tglobal.Logger = Logger;\r\n\t}\r\n}(this));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/js-logger/src/logger.js\n// module id = 8\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_9__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"commonjs\":\"playkit-js-providers\",\"commonjs2\":\"playkit-js-providers\",\"amd\":\"playkit-js-providers\",\"root\":[\"KalturaPlayer\",\"providers\"]}\n// module id = 9\n// module chunks = 0"],"sourceRoot":""}